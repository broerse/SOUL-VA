{	
	"VA::graph": {
		"prefix": "VA::graph",
		"body": [
			"//==============================================================================",
			"/** ${2:Description} */",
			"namespace ${1:Name}",
			"{",
			"    graph Processor()",
			"    {",
			"        input stream SampleType in;",
			"        output stream SampleType out;",
			"",
			"        input",
			"        {",
			"            ${3:Endpoint declarations}",
			"        }",
			"",
			"        let",
			"        {",
			"            ${4:Processor instance declarations}",
			"        }",
			"",
			"        connection",
			"        {",
			"            ${5:Connection declarations}",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "Create a 'Processor' in the 'VA' namespace using a 'graph'."
	},

	"VA::processor": {
		"prefix": "VA::processor",
		"body": [
			"//==============================================================================",
			"/** ${2:Description} */",
			"namespace ${1:Name}",
			"{   ",
			"    struct Coeffs",
			"    {",
			"        ${3:'SampleType' coefficents}",
			"    }",
			"",
			"    void update (Coeffs& c, ${4:Include 'event' parameters as 'float' arguments})",
			"    {",
			"        ${5:Map 'event' parameters to 'Coeffs' members}",
			"    }",
			"    ",
			"    struct State",
			"    {",
			"        ${6:'SampleType' state variables}",
			"    }",
			"",
			"    SampleType process (State& s, SampleType x, Coeffs& c)",
			"    {",
			"        ${8:Process one frame}",
			"    }",
			"",
			"    processor Processor (${9:Initialize 'event' parameters})",
			"    {",
			"        input stream SampleType in;",
			"        output stream SampleType out;",
			"",
			"        ${10:Define 'stream' parameters (example below)}",
			"",
			"        //input stream SampleType paramIn;",
			"",
			"        ${11:Define 'event' parameters (example below)}",
			"",
			"        /*input event float paramIn [[ name: \"Param\", min: 0, max: 1, init: initialParam, unit: \"units\" ]];",
			"",
			"        event paramIn (float v) { param = v; recalc = true; }",
			"",
			"        float param = initialParam;*/",
			"",
			"        bool recalc = true;",
			"",
			"        void run()",
			"        {   ",
			"            State s;",
			"            Coeffs c;",
			"",
			"            ${12:Define constants that depend on processor.period or processor.frequency}",
            "",
            "            let updateIntervalSamples = int ((processor.frequency / 44100.0) * updateInterval);",
            "",
			"            loop",
			"            {",
			"                if (recalc)",
			"                {",
			"                    recalc = false;",
			"",
			"                    c.update (${13:Pass 'event' parameters as arguments});",
			"                }",
			"",
			"                loop (updateIntervalSamples)",
			"                {",
			"",
			"                    ${14:Map 'stream' parameters to members of 'c' (example below)}",
			"",
			"                    //c.a = paramIn * SampleType (2.0);",
			"",
			"                    out << s.process (in, c);",
			"",
			"                    advance();",
			"                }",
			"            }",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "Create a 'Processor' in the 'VA' namespace using a 'processor'."
	},

	"VA::processorADAA": {
        "prefix": "VA::processorADAA",
        "body": [
            "//==============================================================================",
            "/** ${2:Description}",
            "",
            "    Notes:",
            "    - dynamic ADAA specifically optimized for ${3:Use case}",
            "    - If sampling rate is 44.1kHz, use 2x oversampling",
            "*/",
            "namespace ${1:Name}",
            "{   ",
            "    struct Coeffs",
            "    {",
            "        ${4:'SampleType' coefficients for 'f', 'F1', and 'F2'}",
            "        int adaa; //ADAA order",
            "    }",
            "",
            "    void update (Coeffs& c, ${5:Include 'event' parameters as 'float' arguments})",
            "    {",
            "        ${6:Map 'event' parameters to 'Coeffs' members}",
            "        c.adaa = ${7:ADAA rule}",
            "    }    ",
			"",
            "    SampleType f (SampleType x, Coeffs& c)",
            "    {",
            "        ${8:Process one frame}",
            "    }",
            "",
            "    SampleType F1 (SampleType x, Coeffs& c)",
            "    {",
            "        ${9:Process one frame of the first antiderivative of 'f'}",
            "    }",
            "",
            "    SampleType F2 (SampleType x, Coeffs& c)",
            "    {",
            "        ${10:Process one frame of the second antiderivative of 'f'}",
            "    }",
			"",
            "    struct State",
            "    {",
            "        SampleType x_2;",
            "        SampleType x_1;",
            "        SampleType F2_1;",
            "        SampleType F1_1;",
            "    }",
            "",
            "    SampleType processADAA2 (State& s, SampleType x, Coeffs& c)",
            "    {",
            "        //Find F1_0",
            "        ",
            "        let x_0mx_1 = x - s.x_1;",
            "        let F2_0 = F2 (x, c);",
            "",
		    "        let F1_0 = vif (F1 (SampleType (0.5) * (x + s.x_1), c), ",
		    "            (F2_0 - s.F2_1) / x_0mx_1,",
		    "            vabs (x_0mx_1) < ADAA_TOL);",
            "",
            "        //Find f_0",
            "        let x_0mx_2 = x - s.x_2;",
            "",
		    "        let xBar = SampleType (0.5) * (x + s.x_2);",
		    "        let delta = xBar - x;",
			"",
			"        let f_0 = vif (",
            "            (SampleType (2.0) / (x_0mx_2)) * (F1_0 - s.F1_1), ",
            "            vif(",
            "                F1 (SampleType (0.5) * (xBar + x), c),",
            "                (SampleType (2.0) / delta) * (F1 (xBar, c) + (F2_0 - F2 (xBar, c)) / delta),",
            "                vabs (delta) < ADAA_TOL",
            "            ),",
            "            vabs (x_0mx_2) < ADAA_TOL",
            "        );",
			"",
            "        //update s",
            "        s.x_2 = s.x_1;",
            "        s.x_1 = x;",
            "        s.F2_1 = F2_0;",
            "        s.F1_1 = F1_0;",
            "",
            "        return f_0;",
            "    }",
            "",
            "    SampleType processADAA1 (State& s, SampleType x, Coeffs& c)",
            "    {",
            "        //Find f_0",
            "        let x_0mx_1 = x - s.x_1;",
            "        let F1_0 = F1 (x, c);",
            "",
			"        let f_0 = vif (f (SampleType (0.5) * (x + s.x_1), c), ",
		    "            (F1_0 - s.F1_1) / x_0mx_1,",
		    "            vabs (x_0mx_1) < ADAA_TOL);",
            "",
            "        //update s",
            "        s.x_1 = x;",
            "        s.F1_1 = F1_0;",
            "",
            "        return f_0;",
            "    }",
            "",
            "    SampleType process (State& s, SampleType x, Coeffs& c)",
            "    {",
            "        if (c.adaa == 0)",
            "           return f (x, c);",
            "        else if (c.adaa == 1)",
            "           return s.processADAA1 (x, c);",
            "        else",
            "           return s.processADAA2 (x, c);",
            "    }",
            "",
            "    processor Processor(${9:Initialize 'event' parameters})",
            "    {",
            "        input stream SampleType in;",
            "        output stream SampleType out;",
            "        ",
            "        ${11:Define 'stream' parameters (example below)}",
            "",
            "        //input stream SampleType paramIn;",
            "",
            "        ${12:Define 'event' parameters (example below)}",
            "",
            "        /*input event float paramIn [[ name: \"Param\", min: 0, max: 1, init: initialParam, unit: \"units\" ]];",
            "",
            "        event paramIn (float v) { param = v; recalc = true; }",
            "",
            "        float param = initialParam;*/",
            "",
            "        bool recalc = true;",
            "",
            "        void run()",
            "        {",
            "            State s;",
            "            Coeffs c;",
            "",
            "            ${13:Define constants that depend on processor.period or processor.frequency}",
            "",
            "            let updateIntervalSamples = int ((processor.frequency / 44100.0) * updateInterval);",
            "",
            "            loop",
            "            {",
            "                if (recalc)",
            "                {",
            "                    recalc = false;",
            "",
            "                    c.update (${14:Pass 'event' parameters as arguments});",
            "                }",
            "",
            "                loop (updateIntervalSamples)",
            "                {",
            "",
            "                    ${15:Map 'stream' parameters to members of 'c' (example below)}",
            "",
            "                    //c.a = paramIn * SampleType (2.0);",
            "",
            "                    out << s.process (in, c);",
            "",
            "                    advance();",
            "                }",
            "            }",
            "        }",
            "    }",
            "}",
            ""
        ],
        "description": "Processor implementing STATELESS function 'f' and parameter-dependent ADAA order; do not change the ADAA boilerplate ('State' and all 'process' functions)"
    }
}
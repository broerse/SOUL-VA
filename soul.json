{	
	"VA::processor": {
		"prefix": "VA::processor",
		"body": [
			"//==============================================================================",
			"/** ${2:Description} */",
			"namespace ${1:Name}",
			"{   ",
			"    struct Coeffs",
			"    {",
			"        //'SampleType' coefficents",
			"    }",
			"",
			"    struct State",
			"    {",
			"        //'SampleType' state variables",
			"    }",
			"",
			"    void clear (Coeffs& c)",
			"    {",
			"        //reset 'Coeffs' members",
			"    }",
			"",
			"    void reset (State& s)",
			"    {",
			"        //reset 'State' members",
			"    }",
			"",
			"    void update (Coeffs& c /*user parameters*/)",
			"    {",
			"        //set 'Coeffs' members",
			"    }",
			"    ",
			"    SampleType process (State& s, SampleType x, Coeffs& c)",
			"    {",
			"        //processing",
			"    }",
			"",
			"    processor Processor (int initialParam)",
			"    {",
			"        input stream SampleType in;",
			"        output stream SampleType out;",
			"",
			"        input event float paramIn [[ name: \"Param\", min: 0, max: 2, init: initialParam, text: \"A|B|C\" ]];",
			"",
			"        event paramIn (float v) { param = int (v); }",
			"",
			"        int param = initialParam;",
			"",
			"        recalc = true;",
			"",
			"        void run()",
			"        {   ",
			"            State s;",
			"            Coeffs c;",
			"",
			"            loop",
			"            {",
			"                if (recalc)",
			"                {",
			"                    recalc = false;",
			"",
			"                    //call 'update'",
			"                }",
			"",
			"                loop (updateInterval)",
			"                {",
			"                    out << s.process (x, c);",
			"",
			"                    advance();",
			"                }",
			"            }",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "Create a 'Processor' in the 'VA' namespace using a 'processor' "
	},

	"VA::processorNoCoeffs": {
		"prefix": "VA::processorNoCoeffs",
		"body": [
			"//==============================================================================",
			"/** ${2:Description} */",
			"namespace ${1:Name}",
			"{   ",
			"    struct State",
			"    {",
			"        //'SampleType' state variables",
			"    }",
			"",
			"    void reset (State& s)",
			"    {",
			"        //reset 'State' members",
			"    }",
			"",
			"    SampleType process (State& s, SampleType x)",
			"    {",
			"        //processing",
			"    }",
			"",
			"    processor Processor ()",
			"    {",
			"        input stream SampleType in;",
			"        output stream SampleType out;",
			"",
			"        void run()",
			"        {   ",
			"            State s;",
			"",
			"            loop",
			"            {",
			"                out << s.process (x);",
			"",
			"                advance();",
			"            }",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "Create a 'Processor' in the 'VA' namespace using a 'processor' and no 'Coeffs' struct"
	},
	
	"VA::processorNoState": {
        "prefix": "VA::processorNoState",
        "body": [
            "//==============================================================================",
            "/** ${2:Description} */",
            "namespace ${1:Name}",
            "{   ",
            "    struct Coeffs",
            "    {",
            "        //'SampleType' coefficents",
            "    }",
            "",
            "    void clear (Coeffs& c)",
            "    {",
            "        //reset 'Coeffs' members",
            "    }",
            "",
            "    void update (Coeffs& c /*user parameters*/)",
            "    {",
            "        //set 'Coeffs' members",
            "    }",
            "    ",
            "    SampleType process (SampleType x, Coeffs& c)",
            "    {",
            "        //processing",
            "    }",
            "",
            "    processor Processor (int initialParam)",
            "    {",
            "        input stream SampleType in;",
            "        output stream SampleType out;",
            "",
            "        input event float paramIn [[ name: \"Param\", min: 0, max: 2, init: initialParam, text: \"A|B|C\" ]];",
            "",
            "        event paramIn (float v) { param = int (v); }",
            "",
            "        int param = initialParam;",
            "",
			"        bool recalc = true;",
			"",
            "        void run()",
            "        {   ",
            "            Coeffs c;",
            "",
            "            loop",
            "            {",
            "                if (recalc)",
            "                {",
			"                    recalc = false;",
			"",
            "                    //call 'update'",
            "                }",
            "",
            "                loop (updateInterval)",
            "                {",
            "                    out << process (x, c);",
            "",
            "                    advance();",
            "                }",
            "            }",
            "        }",
            "    }",
            "}",
            ""
        ],
        "description": "Create a 'Processor' in the 'VA' namespace using a 'processor' and no 'State' struct"
    },

	"VA::processorNoStateADAA1": {
		"prefix": "VA::processorNoStateADAA1",
		"body": [
			"//==============================================================================",
			"/** ${2:Description} with first-order antiderivative antialiasing",
			"",
			"    Notes:",
			"    - 2x oversampling recommended",
			"*/",
			"namespace ${1:Name}",
			"{   ",
			"    struct Coeffs",
			"    {",
			"        //'SampleType' coefficents",
			"    }",
			"",
			"    struct State",
			"    {",
			"        SampleType x_1;",
			"        SampleType F1_1;",
			"    }",
			"",
			"    void clear (Coeffs& c)",
			"    {",
			"        //reset 'Coeffs' members",
			"    }",
			"",
			"    void reset (State& s)",
			"    {",
			"        s.x_1 = SampleType();",
			"        s.F1_1 = SampleType(); ",
			"    }",
			"",
			"    void update (Coeffs& c /*user parameters*/)",
			"    {",
			"        //set 'Coeffs' members",
			"    }",
			"",
			"    SampleType F1 (SampleType x, Coeffs& c)",
			"    {",
			"        //first antiderivative of 'f'",
			"    }",
			"",
			"    SampleType f (SampleType x, Coeffs& c)",
			"    {",
			"        //nonlinear function",
			"    }",
			"",
			"    SampleType process (State& s, SampleType x, Coeffs& c)",
			"    {",
			"        //Find f_0",
			"        SampleType f_0;",
			"        ",
			"        let x_0mx_1 = x - s.x_1;",
			"        let F1_0 = F1(x, c);",
			"        if (abs(x_0mx_1) < ADAA_TOL)",
			"            f_0 = f(SampleType (0.5) * (x + s.x_1));",
			"        else",
			"            f_0 = (F1_0 - s.F1_1) / x_0mx_1;",
			"",
			"        //update s",
			"        s.x1 = x;",
			"        s.F1_1 = F1_0;",
			"",
			"        return f_0;",
			"    }",
			"",
			"    processor Processor (int initialParam)",
			"    {",
			"        input stream SampleType in;",
			"        output stream SampleType out;",
			"",
			"        input event float paramIn [[ name: \"Param\", min: 0, max: 2, init: initialParam, text: \"A|B|C\" ]];",
			"",
			"        event paramIn (float v) { param = int (v); }",
			"",
			"        int param = initialParam;",
			"",
			"        bool recalc = true;",
			"",
			"        void run()",
			"        {   ",
			"            State s;",
			"            Coeffs c;",
			"",
			"            loop",
			"            {",
			"                if (recalc)",
			"                {",
			"                    recalc = false;",
			"",
			"                    //call 'update'",
			"                }",
			"",
			"                loop (updateInterval)",
			"                {",
			"                    out << s.process (x, c);",
			"",
			"                    advance();",
			"                }",
			"            }",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "VA::ProcessorNoState with first-order antiderivative antialiasing; do not change 'State', 'reset, or 'process'"
	},

	"VA::processorNoStateADAA2": {
		"prefix": "VA::processorNoStateADAA2",
		"body": [
			"//==============================================================================",
			"/** ${2:Description} with second-order antiderivative antialiasing",
			"",
			"    Notes:",
			"    - 2x oversampling recommended",
			"*/",
			"namespace ${1:Name}",
			"{   ",
			"    struct Coeffs",
			"    {",
			"        //'SampleType' coefficents",
			"    }",
			"",
			"    struct State",
			"    {",
			"        SampleType x_2;",
			"        SampleType x_1;",
			"        SampleType F2_1;",
			"        SampleType F1_1;",
			"    }",
			"",
			"    void clear (Coeffs& c)",
			"    {",
			"        //reset 'Coeffs' members",
			"    }",
			"",
			"    void reset (State& s)",
			"    {",
			"        s.x_2 = SampleType();",
			"        s.x_1 = SampleType();",
			"        s.F2_1 = SampleType();",
			"        s.F1_1 = SampleType(); ",
			"    }",
			"",
			"    void update (Coeffs& c /*user parameters*/)",
			"    {",
			"        //set 'Coeffs' members",
			"    }",
			"    ",
			"    SampleType F2 (SampleType x, Coeffs& c)",
			"    {",
			"        //second antiderivative of 'f'",
			"    }",
			"",
			"    SampleType F1 (SampleType x, Coeffs& c)",
			"    {",
			"        //first antiderivative of 'f'",
			"    }",
			"",
			"    SampleType f (SampleType x, Coeffs& c)",
			"    {",
			"        //nonlinear function",
			"    }",
			"",
			"    SampleType process (State& s, SampleType x, Coeffs& c)",
			"    {",
			"        //Find F1_0",
			"        SampleType F1_0;",
			"        ",
			"        let x_0mx_1 = x - s.x_1;",
			"        let F2_0 = F2(x, c);",
			"        if (abs(x_0mx_1) < ADAA_TOL)",
			"            F1_0 = F1(SampleType (0.5) * (x + s.x_1));",
			"        else",
			"            F1_0 = (F2_0 - s.F2_1) / x_0mx_1;",
			"",
			"        //Find f_0",
			"        SampleType f_0;",
			"        let x_0mx_2 = x - s.x_2;",
			"        if (abs(x_0mx_2) < ADAA_TOL)",
			"        {",
			"            let xBar = SampleType (0.5) * (x + s.x2);",
			"            let delta = xBar - x;",
			"",
			"            if (abs (delta) < ADAA_TOL)",
			"                f_0 = f(SampleType (0.5) * (xBar + x));",
			"            else",
			"                f_0 = (SampleType (2.0) / delta) * (F1 (xBar) + (F2_0 - F2 (xBar)) / delta);",
			"        }",
			"        else",
			"            f_0 = (SampleType (2.0) / (x_0mx_2)) * (F1_0 - s.F1_1);",
			"",
			"        //update s",
			"        s.x2 = s.x1;",
			"        s.x1 = x;",
			"        s.F2_1 = F2_0;",
			"        s.F1_1 = F1_0;",
			"",
			"        return f_0;",
			"    }",
			"",
			"    processor Processor (int initialParam)",
			"    {",
			"        input stream SampleType in;",
			"        output stream SampleType out;",
			"",
			"        input event float paramIn [[ name: \"Param\", min: 0, max: 2, init: initialParam, text: \"A|B|C\" ]];",
			"",
			"        event paramIn (float v) { param = int (v); }",
			"",
			"        int param = initialParam;",
			"",
			"        bool recalc = true;",
			"",
			"        void run()",
			"        {   ",
			"            State s;",
			"            Coeffs c;",
			"",
			"            loop",
			"            {",
			"                if (recalc)",
			"                {",
			"                    recalc = false;",
			"",
			"                    //call 'update'",
			"                }",
			"",
			"                loop (updateInterval)",
			"                {",
			"                    out << s.process (x, c);",
			"",
			"                    advance();",
			"                }",
			"            }",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "VA::ProcessorNoState with second-order antiderivative antialiasing; do not change 'State', 'reset, or 'process'"
	},	

	"VA::processorNoStateNoCoeffs": {
        "prefix": "VA::processorNoStateNoCoeffs",
        "body": [
            "//==============================================================================",
            "/** Description */",
            "namespace Name",
            "{   ",
            "    SampleType process (SampleType x)",
            "    {",
            "        //processing",
            "    }",
            "",
            "    processor Processor ()",
            "    {",
            "        input stream SampleType in;",
            "        output stream SampleType out;",
            "",
            "        void run()",
            "        {   ",
            "            Coeffs c;",
            "",
            "            loop",
            "            {",
            "                out << process (x);",
            "",
            "                advance();",
            "",
            "            }",
            "        }",
            "    }",
            "}",
            ""
        ],
        "description": "Create a 'Processor' in the 'VA' namespace using a 'processor' and no 'State' or 'Coeffs' structs"
    },

	"VA::graph": {
		"prefix": "VA::graph",
		"body": [
			"//==============================================================================",
			"/** ${2:Description} */",
			"namespace ${1:Name}",
			"{",
			"    graph Processor ()",
			"    {",
			"        input stream SampleType in;",
			"        output stream SampleType out;",
			"",
			"        input",
			"        {",
			"            //Expose endpoints",
			"        }",
			"",
			"        let",
			"        {",
			"            //Processor instances",
			"        }",
			"",
			"        connection",
			"        {",
			"            //Processor connections",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "Create a 'Processor' in the 'VA' namespace using a 'graph'"
	}
}